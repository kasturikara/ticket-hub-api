openapi: 3.0.0
info:
  title: Ticket Hub API
  description: API for the Ticket Hub application
  version: 1.0.0
  contact:
    email: support@tickethub.com

servers:
  - url: http://localhost:5000/api/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred"
    
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
    
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string
    
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        admin_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        event_date:
          type: string
          format: date-time
        location:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ticket_category_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        ticket_code:
          type: string
        status:
          type: string
          enum: [available, used, cancelled]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    TicketCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        event_id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
          minimum: 0
        available:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    CreateTicketCategoryRequest:
      type: object
      required:
        - name
        - price
        - stock
      properties:
        name:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        stock:
          type: integer
          minimum: 0
    
    UpdateTicketCategoryRequest:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        stock:
          type: integer
          minimum: 0
        available:
          type: integer
          minimum: 0
    
    UpdateTicketRequest:
      type: object
      properties:
        status:
          type: string
          enum: [available, used, cancelled]
        ticket_code:
          type: string
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/me:
    get:
      summary: Get current user information
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /events:
    get:
      summary: Get all events
      tags:
        - Events
      parameters:
        - in: query
          name: location
          schema:
            type: string
          description: Filter events by location
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter events starting from this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter events until this date
        - in: query
          name: admin_id
          schema:
            type: string
            format: uuid
          description: Filter events by admin ID
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of items to skip
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Events retrieved successfully"
                  data:
                    type: object
                    properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                          limit:
                            type: integer
                          offset:
                            type: integer
    
    post:
      summary: Create a new event
      tags:
        - Events
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Event created successfully"
                  data:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
   
  /events/user/me:
    get:
      summary: Get events created by current user
      tags:
        - Events
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User events retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{id}:
    get:
      summary: Get event by ID
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Event ID
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Event retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update an event
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Event ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                event_date:
                  type: string
                  format: date-time
                location:
                  type: string
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Event updated successfully"
                  data:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the event owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete an event
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Event ID
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Event deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the event owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{id}/ticket-categories:
    get:
      summary: Get ticket categories for an event
      tags:
        - Events
        - Ticket Categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Event ID
      responses:
        '200':
          description: List of ticket categories for the event
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Ticket categories retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TicketCategory'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new ticket category for an event
      tags:
        - Events
        - Ticket Categories
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Event ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketCategoryRequest'
      responses:
        '201':
          description: Ticket category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Ticket category created successfully"
                  data:
                    $ref: '#/components/schemas/TicketCategory'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the event owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/categories/{id}:
    get:
      summary: Get ticket category by ID
      tags:
        - Ticket Categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Ticket Category ID
      responses:
        '200':
          description: Ticket category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Ticket category retrieved successfully"
                  data:
                    $ref: '#/components/schemas/TicketCategory'
        '404':
          description: Ticket category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a ticket category
      tags:
        - Ticket Categories
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Ticket Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketCategoryRequest'
      responses:
        '200':
          description: Ticket category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Ticket category updated successfully"
                  data:
                    $ref: '#/components/schemas/TicketCategory'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the event owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete a ticket category
      tags:
        - Ticket Categories
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Ticket Category ID
      responses:
        '200':
          description: Ticket category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Ticket category deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the event owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tickets/categories/{id}/generate:
    post:
      summary: Generate tickets for a ticket category
      tags:
        - Ticket Categories
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Ticket Category ID
      responses:
        '201':
          description: Tickets generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Successfully generated tickets"
                  data:
                    type: object
                    properties:
                      generated_count:
                        type: integer
                        description: Number of tickets generated
                      total_count:
                        type: integer
                        description: Total number of tickets in the category after generation
        '400':
          description: Invalid input or no tickets to generate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the event owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tickets/my-tickets:
    get:
      summary: Get tickets for the current user
      tags:
        - Tickets
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User tickets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User tickets retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tickets/{id}:
    get:
      summary: Get a ticket by ID
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Ticket ID
      responses:
        '200':
          description: Ticket details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Ticket retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Ticket'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a ticket
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Ticket ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicketRequest'
      responses:
        '200':
          description: Ticket updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Ticket updated successfully"
                  data:
                    $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the ticket owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tickets/categories/{id}/tickets:
    get:
      summary: Get tickets for a specific ticket category
      tags:
        - Ticket Categories
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Ticket Category ID
      responses:
        '200':
          description: List of tickets for the ticket category
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Tickets retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '404':
          description: Ticket category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not the event owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'